# web

iptv 介绍
{本文章为 iptv web管理员端UI界面的自动化测试文档}

开发环境：
Git服务器URL: https://gitee.com/shuaipengwang/web.git
firefox版本: 99.0.1 (64 位)
firefox驱动程序版本: geckodriver-v0.30.0-win64
firefox驱动下载地址：
https://github.com/mozilla/geckodriver/releases
注：根据自己的火狐浏览器的版本号，下载对应版本的驱动程序geckodriver
IDE: pycharm2021.3.3 专业版
Platform：Windows-10-10.0.19044-SP0 X64 专业版
Python版本: Python 3.10.1
自动化测试架构: pytest-7.1.1
selenium: '4.1.3'
pip: '21.1.2'
setuptools: '57.0'
自动化测试插件:
allure-pytest': '2.9.45'
pytest-html': '2.1.1'
pytest-metadata': '1.11.0'
pytest-ordering': '0.6'
pytest-rerunfailures': '10.2'

自动化测试设计模式：
PO经典模式,即PageObject模式
PO模式介绍:
1 将测试数据、测试用例脚本、业务脚本进行分开
2 PO模式，实例层分三层结构:
第一层：对象库层,  用于定位元素
第二层：操作层, 用于操作元素：对文本元素进行 文本输入等操作
第三层：业务层, 用于排列组合第二层的测试步骤
3 PO模式, 抽象层分二层结构
第一层：对象库层基类
第二层：操作层基类

Pytest.ini配置,直接可用
[pytest]
addopts = -s -v  --clean-alluredir  --alluredir ./allure-results  --reruns 2 --reruns-delay 3
testpaths = ./test_case
python_files = test_*.py
python_classes = Test*
python_functions = test_*






安装教程
无

使用说明
1 搭建环境

2 编写自动化测试用例脚本

3 cd 项目根目录, 执行以下命令
pytest

4 执行以下命令，生成HTML测试报告
allure generate ./allure-results -o  allure-report --clean

5 搭建 持续集成服务器Jenkins开发、测试、部署环境, 实现CI、CD持续集成、持续测试、持续交付环境


